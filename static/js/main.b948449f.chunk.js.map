{"version":3,"sources":["components/updatedb/updatedb.jsx","components/navbar/navbar.jsx","components/loader/loader.jsx","components/apod/apod.jsx","App.js","serviceWorker.js","index.js"],"names":["Backendless","serverURL","initApp","Updatedb","props","responseData","state","objectID","axios","get","then","response","data","Data","of","save","copyright","dated","date","explanation","hdurl","title","url","media_type","obj","console","log","objectId","setState","catch","error","this","Component","Navbar","className","href","header","ReactLoader","loaded","APOD","dataExists","class","alt","src","target","undefined","App","updatedb","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b948449f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Backendless from 'backendless';\r\nimport axios from 'axios';\r\n\r\nconst APP_ID = '11E907C8-1689-4223-923B-F2EEB8DE0D6F';\r\nconst API_KEY = '2438732D-E7CE-48DA-B2F2-A871F9EEEFA8';\r\nBackendless.serverURL = 'https://api.backendless.com';\r\nBackendless.initApp(APP_ID, API_KEY);\r\n\r\n\r\nexport default class Updatedb extends Component {\r\n    state = {\r\n        objectID: null\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let responseData;\r\n        axios.get('https://api.nasa.gov/planetary/apod?api_key=OpY1aZ3IX0QGbIBFcbckdGLnpdjh8Ak5lIqG4EpP')\r\n            .then(response => {\r\n                responseData = response.data;\r\n\r\n                Backendless.Data.of('NasaAPOD_DB').save(\r\n                    {\r\n                        copyright: responseData.copyright,\r\n                        dated: responseData.date,\r\n                        explanation: responseData.explanation,\r\n                        hdurl: responseData.hdurl,\r\n                        title: responseData.title,\r\n                        url: responseData.url,\r\n                        media_type: responseData.media_type\r\n                    }\r\n                ).then(obj => {\r\n                    console.log('Database Updated with Object ID: ', obj.objectId)\r\n                    this.setState({ objectID: obj.objectId })\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.error('Error while updating the database: ', error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h6>Updated Database with ID : {this.state.objectID}</h6>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand font-weight-bold\" href=\"#\">{this.props.header}</a>\r\n\r\n\r\n            </nav>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Loader from 'react-loader';\r\n\r\nimport \"./loader.css\"\r\n\r\nexport default class ReactLoader extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Loader className=\"loader\" loaded={this.props.loaded}></Loader>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport \"./apod.css\"\r\nimport Navbar from '../navbar/navbar'\r\nimport ReactLoader from '../loader/loader';\r\n\r\nexport default class APOD extends Component {\r\n\r\n\r\n    state = {\r\n        data: [],\r\n        dataExists: false\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://api.nasa.gov/planetary/apod?api_key=OpY1aZ3IX0QGbIBFcbckdGLnpdjh8Ak5lIqG4EpP')\r\n            .then(response => {\r\n                this.setState({ data: response.data })\r\n                this.setState({ dataExists: true })\r\n\r\n                console.log(this.state.data)\r\n\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar header=\"APOD\"></Navbar>\r\n                <ReactLoader loaded={this.state.dataExists}></ReactLoader>\r\n                <div className=\"container my-4\">\r\n\r\n                    <div className=\"row\">\r\n                        <div class=\"col-12 col-lg-6\">\r\n                            <h4 className=\"karla\">{this.state.data.title}</h4>\r\n                        </div>\r\n                        <div className=\"col-12 col-lg-6\">\r\n                            <h6 className=\"text-secondary font-weight-light text-lg-right\">{this.state.data.date}</h6>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-lg-5 my-2\">\r\n                            <img alt=\"Astronomy Photo of the Day\" className=\"img-fluid\" src={this.state.data.url}></img>\r\n                            <div className=\"d-flex mt-2 light-grey py-2\">\r\n                                <h6 className=\"mx-2 mt-1\"><span className=\"badge badge-info p-2\"><a href={this.state.data.url} class=\"text-decoration-none text-light\" target=\"_blank\">Standard Image</a></span></h6>\r\n                                <h6 className=\"mx-2 mt-1\"><span className=\"badge badge-info  p-2\"><a href={this.state.data.hdurl} class=\"text-decoration-none text-light\" target=\"_blank\">HD Image</a></span></h6>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-lg-7 my-2\">\r\n                            <p className=\"text-justify text-wrap standard-font-grey\">{this.state.data.explanation}</p>\r\n                            <small className=\"karla text-secondary\">Copyright: {(this.state.data.copyright == undefined) ? 'Open Source' : this.state.data.copyright} </small>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Updatedb from './components/updatedb/updatedb';\nimport APOD from './components/apod/apod';\n\n\nexport default class App extends Component {\n  updatedb = () => {\n    console.log('This is from new function.')\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <APOD></APOD>\n\n        <Router>\n          <Link to=\"/updatedb\"></Link>\n          <Switch>\n            <Route exact path=\"/updatedb\">\n              <Updatedb></Updatedb>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n\n\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}